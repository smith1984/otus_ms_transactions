{
	"info": {
		"_postman_id": "b58da06d-116c-487c-a370-851a87b5f8a4",
		"name": "HW collection SP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25545992"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create user\", function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Content user created\", function(){",
							"const responseJson = pm.response.json();",
							"pm.expect(responseJson.name).to.eql(\"Maksim\");",
							"pm.expect(responseJson.email).to.eql(\"sss@sss.ss\");",
							"});",
							"",
							"pm.collectionVariables.set(\"user_id\",  pm.response.json().id);",
							"pm.collectionVariables.set(\"billing_id\",  pm.response.json().billingId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Maksim\", \"email\": \"sss@sss.ss\"}"
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{basePort}}/user/user",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{basePort}}",
					"path": [
						"user",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Billing account refill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Billing account refill\", function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Content billing account refill\", function(){",
							"const responseJson = pm.response.json();",
							"pm.expect(responseJson.status).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{basePort}}/billing/billing/refill/{{billing_id}}/100.20",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{basePort}}",
					"path": [
						"billing",
						"billing",
						"refill",
						"{{billing_id}}",
						"100.20"
					]
				}
			},
			"response": []
		},
		{
			"name": "Billing account buy product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Buy product\", function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Success buy product\", function(){",
							"const responseJson = pm.response.json();",
							"pm.expect(responseJson.status).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{basePort}}/billing/billing/{{billing_id}}/48.90",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{basePort}}",
					"path": [
						"billing",
						"billing",
						"{{billing_id}}",
						"48.90"
					]
				}
			},
			"response": []
		},
		{
			"name": "Billing account wallet after success buy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get billing account after success buy\", function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Content billing account after success buy\", function(){",
							"const responseJson = pm.response.json();",
							"pm.expect(responseJson.wallet).to.eql(51.3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{basePort}}/billing/billing/{{billing_id}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{basePort}}",
					"path": [
						"billing",
						"billing",
						"{{billing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Billing account buy product failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Buy product\", function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Failed buy product\", function(){",
							"const responseJson = pm.response.json();",
							"pm.expect(responseJson.status).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{basePort}}/billing/billing/{{billing_id}}/148.90",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{basePort}}",
					"path": [
						"billing",
						"billing",
						"{{billing_id}}",
						"148.90"
					]
				}
			},
			"response": []
		},
		{
			"name": "Billing account wallet after failed buy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get billing account after failed buy\", function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Content billing account after failed buy\", function(){",
							"const responseJson = pm.response.json();",
							"pm.expect(responseJson.wallet).to.eql(51.3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{basePort}}/billing/billing/{{billing_id}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{basePort}}",
					"path": [
						"billing",
						"billing",
						"{{billing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get notifications for user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get notification for user\", function(){",
							"pm.response.to.have.status(200)",
							"});",
							"",
							"pm.test(\"Content notification for user\", function(){",
							"const responseJson = pm.response.json();",
							"pm.expect(responseJson.length).to.eql(4);",
							"pm.expect(responseJson[0].email).to.eq(\"sss@sss.ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(() => {}, 2000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{basePort}}/notification/notification/{{user_id}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{basePort}}",
					"path": [
						"notification",
						"notification",
						"{{user_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"tests[\"[INFO] Request: \" + (('data' in request) ? request['data'] : '') ] = true;",
					"tests[\"[INFO] Response: \" + responseBody] = true;"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework",
			"type": "string"
		},
		{
			"key": "basePort",
			"value": "80",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "billing_id",
			"value": ""
		}
	]
}